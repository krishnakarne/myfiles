saveDiagram(xml: string): Promise<void> {
    return new Promise((resolve, reject) => {
        try {
            // Parse the XML and try to find the diagram name
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(xml, 'application/xml');

            // Attempt to find the name attribute in any element that might represent the diagram
            let diagramName = 'diagram'; // Default name
            const diagramElements = xmlDoc.getElementsByTagName('*'); // Get all elements

            for (let i = 0; i < diagramElements.length; i++) {
                const element = diagramElements[i];
                if (element.hasAttribute('name')) {
                    diagramName = element.getAttribute('name')!;
                    break;
                }
            }

            // Create a canvas to render the diagram content
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');

            // Set the canvas dimensions based on XML content or a fixed size
            canvas.width = 1000; // You may calculate this based on XML content
            canvas.height = 1000; // You may calculate this based on XML content

            // Example rendering logic based on extracted XML
            const shapes = xmlDoc.getElementsByTagName('shape'); // Assuming 'shape' elements represent shapes

            for (let i = 0; i < shapes.length; i++) {
                const shape = shapes[i];
                const x = parseFloat(shape.getAttribute('x')) || 0;
                const y = parseFloat(shape.getAttribute('y')) || 0;
                const width =
