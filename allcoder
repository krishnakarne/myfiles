<div class="note">
  <div class="note_toolbar">
    <span class="close material-icons" (click)="onDismiss($event)">close</span>
  </div>
  <div class="content" contenteditable="true" (focusout)="saveNote($event)" [innerHTML]="note.content"></div>
  <div class="footer">
    <div class="menu-bar">
      <button class="menu-button" (click)="execCommand('bold')"><strong>B</strong></button>
      <button class="menu-button" (click)="execCommand('italic')"><em>I</em></button>
      <button class="menu-button" (click)="execCommand('underline')"><u>U</u></button>
      <button class="menu-button" (click)="execCommand('strikeThrough')">abc</button>
      <button class="menu-button" (click)="execCommand('insertUnorderedList')">&#9776;</button>
      <button class="menu-button" (click)="insertImage()">&#128247;</button>
    </div>
  </div>
</div>
------------------------------------------------
.footer {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #fffacd;
  padding: 5px;
}

.menu-bar {
  display: flex;
  justify-content: space-around;
  width: 100%;
  max-width: 300px; /* Adjust as needed */
}

.menu-button {
  background: none;
  border: none;
  padding: 5px;
  font-size: 16px;
  cursor: pointer;
}

.menu-button:hover {
  background-color: #e6e6e6;
  border-radius: 4px;
}

--------------------------------------------------------------------------------------------------------------------------

import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-sticky-note',
  templateUrl: './sticky-note.component.html',
  styleUrls: ['./sticky-note.component.scss']
})
export class StickyNoteComponent {
  @Input() note: any;

  execCommand(command: string) {
    document.execCommand(command, false, null);
  }

  insertImage() {
    const url = prompt("Enter the image URL", "https://");
    if (url) {
      document.execCommand('insertImage', false, url);
    }
  }
execCommand(command: string) {
  const selection = window.getSelection();
  if (!selection.rangeCount) return;

  const range = selection.getRangeAt(0);
  let wrapper;

  switch (command) {
    case 'bold':
      wrapper = document.createElement('strong');
      break;
    case 'italic':
      wrapper = document.createElement('em');
      break;
    case 'underline':
      wrapper = document.createElement('u');
      break;
    case 'strikeThrough':
      wrapper = document.createElement('s');
      break;
    case 'insertUnorderedList':
      wrapper = this.createUnorderedList(range);
      break;
    default:
      wrapper = document.createElement('span');
      break;
  }

  if (command !== 'insertUnorderedList') {
    wrapper.appendChild(range.extractContents());
    range.insertNode(wrapper);
  }
}

createUnorderedList(range: Range): HTMLElement {
  const ul = document.createElement('ul');
  const li = document.createElement('li');

  if (range.collapsed) {
    // If the selection is collapsed (i.e., the cursor is not highlighting text),
    // we insert an empty <li> to allow the user to type
    li.textContent = '\u200B';  // Zero-width space to keep the <li> visible
  } else {
    li.appendChild(range.extractContents());
  }

  ul.appendChild(li);
  return ul;
}

