import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { NgxSpinnerService } from 'ngx-spinner';

@Component({
  selector: 'app-draw-io-details',
  templateUrl: './draw-io-details.component.html',
  styleUrls: ['./draw-io-details.component.scss']
})
export class DrawIoDetailsComponent implements OnInit {
  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement>;

  constructor(private spinner: NgxSpinnerService) {}

  ngOnInit(): void {
    this.spinner.show();
    // Initialization logic if needed
    this.spinner.hide();
  }

  saveDiagramAsPNG(): void {
    const container = this.container.nativeElement;
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    // Set canvas dimensions to match container dimensions
    const rect = container.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;

    // Set white background
    ctx.fillStyle = 'white';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Recursive function to draw elements on canvas
    const drawElement = (element: HTMLElement, x: number, y: number) => {
      const style = window.getComputedStyle(element);
      const rect = element.getBoundingClientRect();

      // Draw background color
      if (style.backgroundColor !== 'rgba(0, 0, 0, 0)') {
        ctx.fillStyle = style.backgroundColor;
        ctx.fillRect(x, y, rect.width, rect.height);
      }

      // Draw text
      if (element.textContent) {
        ctx.font = `${style.fontSize} ${style.fontFamily}`;
        ctx.fillStyle = style.color;
        ctx.fillText(element.textContent, x, y + parseInt(style.fontSize));
      }

      // Handle images
      if (element instanceof HTMLImageElement) {
        ctx.drawImage(element, x, y, rect.width, rect.height);
      }

      // Recursively draw child elements
      Array.from(element.children).forEach((child: HTMLElement) => {
        const childRect = child.getBoundingClientRect();
        drawElement(child, childRect.left - rect.left, childRect.top - rect.top);
      });
    };

    // Start drawing from the container
    drawElement(container, 0, 0);

    // Convert the canvas to a PNG data URL and trigger download
    const pngDataUrl = canvas.toDataURL('image/png');
    const a = document.createElement('a');
    a.href = pngDataUrl;
    a.download = 'diagram.png';  // File name
    a.click();
  }
}
