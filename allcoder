    this.graphEditor = new GraphEditor(this.container.nativeElement, this.mxgraphScriptsContainer.nativeElement, {
      actions: {
        save: this.saveDiagramAsSVG.bind(this)  // Bind the save action to save as SVG
      }
    });


saveDiagramAsSVG(): Promise<void> {
    return new Promise((resolve, reject) => {
        try {
            // Get the container where the diagram is rendered
            const container = this.container.nativeElement;
            const svgElement = container.querySelector('svg'); // Assuming the diagram is rendered as an SVG

            if (!svgElement) {
                throw new Error('SVG element not found in the container');
            }

            // Serialize the SVG content to include Draw.io specific XML data
            const svgData = new XMLSerializer().serializeToString(svgElement);

            // Add any necessary Draw.io specific XML metadata here if required (optional)
            // This might include embedding the diagram's XML data within the SVG for later editing

            // Create a Blob from the SVG data
            const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });

            // Create a download link
            const url = URL.createObjectURL(svgBlob);
            const a = document.createElement('a');
            a.href = url;

            // Set the default filename for the SVG
            a.download = `diagram.svg`;

            // Trigger the download
            a.click();
            URL.revokeObjectURL(url);

            resolve();
        } catch (error) {
            console.error('Save as SVG failed', error);
            reject(error);
        }
    });
}
