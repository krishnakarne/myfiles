.mat-cell, .mat-header-cell {
  border: none;
  padding: 8px; /* Adjust padding as needed */
}

.mat-row {
  display: flex;
  align-items: stretch;
  border: 1px solid #ddd; /* Border around the entire row */
  margin-bottom: 8px; /* Spacing between rows */
  border-radius: 4px; /* Optional: rounded corners */
}

.mat-row:hover {
  background-color: #f5f5f5; /* Highlight on hover */
}



export class CopilotDetailsComponent {
  displayedColumns: string[] = [
    'date',
    'total_suggestions_count',
    'total_lines_accepted',
    'total_acceptance_count',
    'total_lines_suggested',
    'total_active_users',
    'language',
    'editor'
  ];
  
  copilotData = [/* your data */];

  shouldMerge(index: number, column: string): boolean {
    const data = this.copilotData.filteredData;
    if (index === 0) return true;
    return data[index][column] !== data[index - 1][column];
  }

  rowSpanCount(column: string): number {
    let count = 1;
    const data = this.copilotData.filteredData;
    for (let i = 1; i < data.length; i++) {
      if (data[i][column] === data[i - 1][column]) {
        count++;
      } else {
        break;
      }
    }
    return count;
  }
}





<ng-container matColumnDef="date">
    <th mat-header-cell *matHeaderCellDef> Date </th>
    <td mat-cell *matCellDef="let element; let i = index" [attr.rowspan]="rowSpanCount('day')">
      {{element.day}}
    </td>
  </ng-container>



<mat-table [dataSource]="copilotData" class="mat-elevation-z8">

  <!-- Date Column -->
  <ng-container matColumnDef="date">
    <th mat-header-cell *matHeaderCellDef> Date </th>
    <td mat-cell *matCellDef="let element"> {{element.date}} </td>
  </ng-container>

  <!-- Total Suggestions Count -->
  <ng-container matColumnDef="total_suggestions_count">
    <th mat-header-cell *matHeaderCellDef> Total Suggestions Count </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldDisplayRowspan(i) ? copilotData.length : null">
      <span *ngIf="shouldDisplayRowspan(i)">{{element.total_suggestions_count}}</span>
    </td>
  </ng-container>

  <!-- Total Lines Accepted -->
  <ng-container matColumnDef="total_lines_accepted">
    <th mat-header-cell *matHeaderCellDef> Total Lines Accepted </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldDisplayRowspan(i) ? copilotData.length : null">
      <span *ngIf="shouldDisplayRowspan(i)">{{element.total_lines_accepted}}</span>
    </td>
  </ng-container>

  <!-- Total Acceptance Count -->
  <ng-container matColumnDef="total_acceptance_count">
    <th mat-header-cell *matHeaderCellDef> Total Acceptance Count </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldDisplayRowspan(i) ? copilotData.length : null">
      <span *ngIf="shouldDisplayRowspan(i)">{{element.total_acceptance_count}}</span>
    </td>
  </ng-container>

  <!-- Total Lines Suggested -->
  <ng-container matColumnDef="total_lines_suggested">
    <th mat-header-cell *matHeaderCellDef> Total Lines Suggested </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldDisplayRowspan(i) ? copilotData.length : null">
      <span *ngIf="shouldDisplayRowspan(i)">{{element.total_lines_suggested}}</span>
    </td>
  </ng-container>

  <!-- Total Active Users -->
  <ng-container matColumnDef="total_active_users">
    <th mat-header-cell *matHeaderCellDef> Total Active Users </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldDisplayRowspan(i) ? copilotData.length : null">
      <span *ngIf="shouldDisplayRowspan(i)">{{element.total_active_users}}</span>
    </td>
  </ng-container>

  <!-- Language Column -->
  <ng-container matColumnDef="language">
    <th mat-header-cell *matHeaderCellDef> Language </th>
    <td mat-cell *matCellDef="let element"> {{element.language}} </td>
  </ng-container>

  <!-- Editor Column -->
  <ng-container matColumnDef="editor">
    <th mat-header-cell *matHeaderCellDef> Editor </th>
    <td mat-cell *matCellDef="let element"> {{element.editor}} </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>

</mat-table>




openDiagram(): void {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.xml, .png'; // Accept XML and PNG files

    input.onchange = (event: any) => {
        const file = event.target.files[0];
        if (file) {
            let fileName = file.name;
            const fileExtension = fileName.split('.').pop();
            
            // Modify filename if necessary
            if (fileExtension === 'xml' || fileExtension === 'png') {
                fileName = fileName.replace(`.${fileExtension}`, ''); // Remove the extension
            }

            // Perform actions based on the file type
            if (file.type === 'image/png') {
                this.loadPngAsImage(file);
            } else if (file.type === 'application/xml') {
                this.loadDiagramFromFile(file);
            } else {
                console.error('Unsupported file type');
            }
        }
    };

    input.click(); // Trigger the file selection dialog
}

loadDiagramFromFile(file: File): void {
    const reader = new FileReader();
    reader.onload = (event) => {
        try {
            const fileContent = event.target.result as string;
            this.graphEditor.setXml(fileContent); // Load the content into the editor

            // Display the filename without extension
            this.graphEditor.setFileName(file.name.replace('.xml', '')); 

            localStorage.setItem('unsavedDiagram', fileContent); // Save to localStorage to keep track
        } catch (error) {
            console.error('Error loading diagram file', error);
        }
    };
    reader.readAsText(file);
}






import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { NgxSpinnerService } from 'ngx-spinner';
import { GraphEditor } from '@zklogic/draw.io';

@Component({
  selector: 'app-draw-io-details',
  templateUrl: './draw-io-details.component.html',
  styleUrls: ['./draw-io-details.component.scss']
})
export class DrawIoDetailsComponent implements OnInit {
  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement>;
  @ViewChild('mxgraphScriptsContainer', { static: true }) mxgraphScriptsContainer: ElementRef<HTMLElement>;
  graphEditor: GraphEditor;

  constructor(private spinner: NgxSpinnerService) {}

  ngOnInit(): void {
    this.spinner.show();

    // Initialize the graph editor with actions for saving and opening diagrams
    this.graphEditor = new GraphEditor(this.container.nativeElement, this.mxgraphScriptsContainer.nativeElement, {
      actions: {
        save: this.saveDiagram.bind(this),
        open: this.openDiagram.bind(this)
      }
    });

    // Initialize the editor and load any unsaved work from localStorage
    this.graphEditor.initialized(this.container.nativeElement, this.mxgraphScriptsContainer.nativeElement, {
      load: () => this.loadWorkFromLocalStorage().then(() => this.spinner.hide())
    });

    // Listen for changes and save the current work to localStorage
    this.graphEditor.onChange(() => {
      this.saveWorkToLocalStorage();
    });

    // Attach event listener to the "Open from" menu item
    this.attachOpenFromMenuListener();
  }

  attachOpenFromMenuListener(): void {
    // Assuming the "Open from" menu item has a unique identifier or can be selected via a CSS class
    const openFromMenuItem = document.querySelector('[data-action="open"]');
    if (openFromMenuItem) {
      openFromMenuItem.addEventListener('click', (event) => {
        event.preventDefault();
        this.openDiagram();
      });
    }
  }

  saveWorkToLocalStorage(): void {
    const diagramData = this.graphEditor.getXml(); // Get current diagram data in XML format
    localStorage.setItem('unsavedDiagram', diagramData); // Save to localStorage
  }

  loadWorkFromLocalStorage(): Promise<void> {
    return new Promise((resolve) => {
      const savedData = localStorage.getItem('unsavedDiagram');
      if (savedData) {
        this.graphEditor.setXml(savedData); // Load the diagram data into the editor
      }
      resolve();
    });
  }

  saveDiagram(): void {
    const xml = this.graphEditor.getXml();

    // Save the diagram to localStorage to preserve state across tab changes
    localStorage.setItem('savedDiagram', xml);

    // Trigger the download of the diagram as an XML file
    const blob = new Blob([xml], { type: 'application/xml' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'diagram.xml';
    a.click();
  }

  openDiagram(): void {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.xml, .png'; // Accept XML and PNG files

    input.onchange = (event: any) => {
      const file = event.target.files[0];
      if (file) {
        if (file.type === 'image/png') {
          this.loadPngAsImage(file);
        } else if (file.type === 'application/xml') {
          this.loadDiagramFromFile(file);
        }
      }
    };

    input.click(); // Trigger the file selection dialog
  }

  loadDiagramFromFile(file: File): void {
    const reader = new FileReader();
    reader.onload = (event) => {
      const fileContent = event.target.result as string;
      this.graphEditor.setXml(fileContent); // Load the content into the editor
      localStorage.setItem('unsavedDiagram', fileContent); // Save to localStorage to keep track
    };
    reader.readAsText(file);
  }

  loadPngAsImage(file: File): void {
    const reader = new FileReader();
    reader.onload = (event: any) => {
      const imageSrc = event.target.result; // Base64 encoded image
      this.addImageToCanvas(imageSrc);
    };
    reader.readAsDataURL(file); // Read file as Data URL (base64)
  }

  addImageToCanvas(imageSrc: string): void {
    const graph = this.graphEditor.getGraph();
    const model = graph.getModel();

    model.beginUpdate();
    try {
      const parent = graph.getDefaultParent();
      graph.insertVertex(parent, null, '', 20, 20, 200, 200, `shape=image;image=${imageSrc};`);
    } finally {
      model.endUpdate();
    }
  }
}



































import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { NgxSpinnerService } from 'ngx-spinner';
import { GraphEditor } from '@zklogic/draw.io';

@Component({
  selector: 'app-draw-io-details',
  templateUrl: './draw-io-details.component.html',
  styleUrls: ['./draw-io-details.component.scss']
})
export class DrawIoDetailsComponent implements OnInit {
  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement>;
  @ViewChild('mxgraphScriptsContainer', { static: true }) mxgraphScriptsContainer: ElementRef<HTMLElement>;
  graphEditor: GraphEditor;

  constructor(private spinner: NgxSpinnerService) {}

  ngOnInit(): void {
    this.spinner.show();

    // Initialize the graph editor with actions and load any unsaved work
    this.graphEditor = new GraphEditor(this.container.nativeElement, this.mxgraphScriptsContainer.nativeElement, {
      actions: {
        save: this.saveDiagram.bind(this),
        open: this.openDiagram.bind(this)
      }
    });

    this.graphEditor.initialized(this.container.nativeElement, this.mxgraphScriptsContainer.nativeElement, {
      load: () => this.loadWorkFromLocalStorage().then(() => this.spinner.hide())
    });

    // Listen for changes to save to localStorage
    this.graphEditor.onChange(() => {
      this.saveWorkToLocalStorage();
    });
  }

  saveWorkToLocalStorage(): void {
    const diagramData = this.graphEditor.getXml(); // Get current diagram data in XML format
    localStorage.setItem('unsavedDiagram', diagramData); // Save to localStorage
  }

  loadWorkFromLocalStorage(): Promise<void> {
    return new Promise((resolve) => {
      const savedData = localStorage.getItem('unsavedDiagram');
      if (savedData) {
        this.graphEditor.setXml(savedData); // Load the diagram data into the editor
      }
      resolve();
    });
  }

  saveDiagram(): void {
    const xml = this.graphEditor.getXml();

    // Save the diagram to localStorage to preserve state across tab changes
    localStorage.setItem('savedDiagram', xml);

    // Trigger the download of the diagram as an XML file
    const blob = new Blob([xml], { type: 'application/xml' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'diagram.xml';
    a.click();
  }

  openDiagram(): void {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.xml'; // Accept only XML files

    input.onchange = (event: any) => {
      const file = event.target.files[0];
      if (file) {
        this.loadDiagramFromFile(file);
      }
    };

    input.click(); // Trigger the file selection dialog
  }

  loadDiagramFromFile(file: File): void {
    const reader = new FileReader();
    reader.onload = (event) => {
      const fileContent = event.target.result as string;
      this.graphEditor.setXml(fileContent); // Load the content into the editor
      localStorage.setItem('unsavedDiagram', fileContent); // Save to localStorage to keep track
    };
    reader.readAsText(file);
  }
}





















saveDiagram(xml: any): Promise<void> {
    return new Promise((resolve, reject) => {
        try {
            // Extract the Base64 encoded SVG from the XML
            const base64Data = xml.image.base64Encoded;

            if (!base64Data) {
                throw new Error('No base64 data found in the XML');
            }

            // Decode the Base64 string
            const svgData = atob(base64Data);

            // Create an image element
            const img = new Image();
            img.src = 'data:image/svg+xml;base64,' + base64Data;

            img.onload = () => {
                // Create a canvas to render the SVG
                const canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                const ctx = canvas.getContext('2d');

                // Draw the SVG onto the canvas
                ctx.drawImage(img, 0, 0);

                // Convert the canvas to a PNG data URL
                const pngDataUrl = canvas.toDataURL('image/png');

                // Create a download link for the PNG
                const a = document.createElement('a');
                a.href = pngDataUrl;
                a.download = `${xml.name || 'diagram'}.png`; // Use the diagram name or default
                a.click();

                resolve();
            };

            img.onerror = (error) => {
                reject(new Error('Failed to load the SVG image'));
            };
        } catch (error) {
            console.error('Save failed', error);
            reject(error);
        }
    });
}
