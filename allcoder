saveDiagramAsImage(imageFormat: 'png' | 'jpg'): Promise<void> {
    return new Promise((resolve, reject) => {
        try {
            // Get the container where the diagram is rendered
            const container = this.container.nativeElement;
            const svgElement = container.querySelector('svg'); // Assuming the diagram is rendered as an SVG

            if (!svgElement) {
                throw new Error('SVG element not found in the container');
            }

            // Create a canvas element
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');

            // Set canvas dimensions to match the SVG
            const svgRect = svgElement.getBoundingClientRect();
            canvas.width = svgRect.width;
            canvas.height = svgRect.height;

            // Convert the SVG to a data URL
            const svgData = new XMLSerializer().serializeToString(svgElement);
            const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
            const url = URL.createObjectURL(svgBlob);

            const img = new Image();
            img.onload = () => {
                // Draw the SVG onto the canvas
                ctx.drawImage(img, 0, 0);
                URL.revokeObjectURL(url);

                // Convert the canvas to a data URL in the desired format (PNG or JPG)
                const imageDataUrl = canvas.toDataURL(`image/${imageFormat}`);

                // Create a download link
                const a = document.createElement('a');
                a.href = imageDataUrl;

                // Ensure the file name is properly set as a string
                a.download = `diagram.${imageFormat}`;

                // Trigger the download
                a.click();
                resolve();
            };
            img.onerror = (error) => {
                console.error('Image rendering failed', error);
                reject(error);
            };
            img.src = url; // Trigger the image load
        } catch (error) {
            console.error('Save as image failed', error);
            reject(error);
        }
    });
}
