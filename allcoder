toggleRow(element: any, index: number) {
  const name = element.name;

  const headers = new HttpHeaders({
    'X-API-Key': `${environment.ACCESS_TOKEN}`
  });

  const httpOptions = {
    headers: headers
  };

  // Fetch branch details URL from service and then make the HTTP request
  this.service.getBranchDetailsUrl(this.http, name).pipe(
    mergeMap((branchDetailsUrl: string) => {
      console.log('Branch Details URL:', branchDetailsUrl); // Debugging URL
      return this.http.get(branchDetailsUrl, httpOptions);
    })
  ).subscribe((response: any) => {
    console.log('branch details url response:', response);
    this.branchDetails = new MatTableDataSource(response);
    this.cd.detectChanges();

    const paginator = this.paginatorbranch.toArray()[index];
    this.branchDetails.paginator = paginator;
    this.branchDetails.sort = this.innerSort;
  }, error => {
    console.error('Error fetching repository branch details:', error);
  });

  // Fetch team details URL from service and then make the HTTP request
  this.service.getTeamDetailsUrl(this.http, name).pipe(
    mergeMap((teamDetailsUrl: string) => {
      console.log('Team Details URL:', teamDetailsUrl); // Debugging URL
      return this.http.get(teamDetailsUrl, httpOptions);
    })
  ).subscribe((response: any) => {
    console.log('team details url response:', response);
    this.itemDetails = new MatTableDataSource(response); // Use the appropriate property here
    this.cd.detectChanges();

    const paginator = this.paginatorteams.toArray()[index];
    this.itemDetails.paginator = paginator;
    this.itemDetails.sort = this.innerSort;
  }, error => {
    console.error('Error fetching repository team details:', error);
  });
}
