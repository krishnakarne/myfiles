export class DevopsInventoryComponent implements OnInit {
  editingRowId: number | null = null; // Keeps track of which row is being edited
  branchSource: any[] = []; // This holds the data displayed in the table
  originalData: any; // Backup for the original data
  @ViewChild(MatPaginator) batchPaginator: MatPaginator;
  
  displayedColumns: string[] = ['id', 'name', 'url', 'location', 'description', 'actions'];

  ngOnInit(): void {
    this.loadTableData();
  }

  // Function to load the data from the service
  loadTableData(): void {
    this.service.getDevopsInventoryUrl().subscribe((res: any) => {
      this.originalData = res;
      this.branchSource = new MatTableDataSource<any>(this.originalData);
      this.branchSource.paginator = this.batchPaginator; // Set the paginator
    });
  }

  // Function to toggle editing mode for the specific row
  toggleEdit(element: any): void {
    if (this.editingRowId === element.id) {
      if (this.isFormValid(element)) {
        this.updateRow(element); // Call the update function
        this.editingRowId = null; // Exit editing mode after saving
      }
    } else {
      this.editingRowId = element.id; // Set the row to be edited
    }
  }

  // Function to validate form fields
  isFormValid(element: any): boolean {
    return element.name?.trim() !== '' && element.url?.trim() !== '';
  }

  // Function to call PUT API and update the data
  updateRow(element: any): void {
    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
      data: 'Are you sure you want to SUBMIT the changes?'
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result === 'YES') {
        this.service.updateDevopsInventoryUrl(element).subscribe(() => {
          this.loadTableData(); // Reload table data after update
        });
      }
    });
  }

  // Function to add a new row to the table
  addRow(): void {
    const newRow = { id: 0, name: '', description: '', location: '', url: '', isEditing: true };
    this.branchSource.data = [...this.branchSource.data, newRow];
    setTimeout(() => {
      this.batchPaginator.pageIndex = Math.floor(this.branchSource.data.length / this.batchPaginator.pageSize);
      this.branchSource.paginator = this.batchPaginator;
    });
  }

  // Function to delete a row from the table
  deleteRow(element: any): void {
    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
      data: 'Are you sure you want to delete the row?'
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result === 'YES') {
        this.service.deleteDevopsInventoryUrl(element.id).subscribe(() => {
          this.loadTableData(); // Reload the table after deleting the row
        });
      }
    });
  }
}
