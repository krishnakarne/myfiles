<mat-table [dataSource]="copilotData" class="mat-elevation-z8">
  
  <!-- Date Column -->
  <ng-container matColumnDef="date">
    <th mat-header-cell *matHeaderCellDef> Date </th>
    <td mat-cell *matCellDef="let element; let i = index"> {{element.date}} </td>
  </ng-container>

  <!-- Total Suggestions Count -->
  <ng-container matColumnDef="total_suggestions_count">
    <th mat-header-cell *matHeaderCellDef> Total Suggestions Count </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldMerge(i, 'total_suggestions_count') ? rowSpanCount('total_suggestions_count') : 1">
      <span *ngIf="shouldMerge(i, 'total_suggestions_count')">{{element.total_suggestions_count}}</span>
    </td>
  </ng-container>

  <!-- Total Lines Accepted -->
  <ng-container matColumnDef="total_lines_accepted">
    <th mat-header-cell *matHeaderCellDef> Total Lines Accepted </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldMerge(i, 'total_lines_accepted') ? rowSpanCount('total_lines_accepted') : 1">
      <span *ngIf="shouldMerge(i, 'total_lines_accepted')">{{element.total_lines_accepted}}</span>
    </td>
  </ng-container>

  <!-- Total Acceptance Count -->
  <ng-container matColumnDef="total_acceptance_count">
    <th mat-header-cell *matHeaderCellDef> Total Acceptance Count </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldMerge(i, 'total_acceptance_count') ? rowSpanCount('total_acceptance_count') : 1">
      <span *ngIf="shouldMerge(i, 'total_acceptance_count')">{{element.total_acceptance_count}}</span>
    </td>
  </ng-container>

  <!-- Total Lines Suggested -->
  <ng-container matColumnDef="total_lines_suggested">
    <th mat-header-cell *matHeaderCellDef> Total Lines Suggested </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldMerge(i, 'total_lines_suggested') ? rowSpanCount('total_lines_suggested') : 1">
      <span *ngIf="shouldMerge(i, 'total_lines_suggested')">{{element.total_lines_suggested}}</span>
    </td>
  </ng-container>

  <!-- Total Active Users -->
  <ng-container matColumnDef="total_active_users">
    <th mat-header-cell *matHeaderCellDef> Total Active Users </th>
    <td mat-cell *matCellDef="let element; let i = index" 
        [attr.rowspan]="shouldMerge(i, 'total_active_users') ? rowSpanCount('total_active_users') : 1">
      <span *ngIf="shouldMerge(i, 'total_active_users')">{{element.total_active_users}}</span>
    </td>
  </ng-container>

  <!-- Language Column -->
  <ng-container matColumnDef="language">
    <th mat-header-cell *matHeaderCellDef> Language </th>
    <td mat-cell *matCellDef="let element"> {{element.language}} </td>
  </ng-container>

  <!-- Editor Column -->
  <ng-container matColumnDef="editor">
    <th mat-header-cell *matHeaderCellDef> Editor </th>
    <td mat-cell *matCellDef="let element"> {{element.editor}} </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>

</mat-table>










---------------------------------------------------------------------------------------------------------------------------------------------
export class CopilotDetailsComponent {
  displayedColumns: string[] = [
    'date',
    'total_suggestions_count',
    'total_lines_accepted',
    'total_acceptance_count',
    'total_lines_suggested',
    'total_active_users',
    'language',
    'editor'
  ];
  
  copilotData = [
    {
      date: '2024-07-17',
      total_suggestions_count: 992,
      total_lines_accepted: 545,
      total_acceptance_count: 256,
      total_lines_suggested: 2470,
      total_active_users: 20,
      language: 'javascript',
      editor: 'vscode'
    },
    // Additional data objects
  ];

  shouldMerge(index: number, column: string): boolean {
    if (index === 0) return true;
    return this.copilotData[index][column] !== this.copilotData[index - 1][column];
  }

  rowSpanCount(column: string): number {
    let count = 1;
    for (let i = 1; i < this.copilotData.length; i++) {
      if (this.copilotData[i][column] === this.copilotData[i - 1][column]) {
        count++;
      } else {
        break;
      }
    }
    return count;
  }
}
